import requests
import time
import json

BASE_URL = "http://localhost:5001"  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—Ç 5001


def wait_for_app():
    """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É"""
    print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É...")
    for i in range(30):
        try:
            response = requests.get(f"{BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –î–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π!")
                return True
        except:
            pass
        print(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è... ({i + 1}/30)")
        time.sleep(2)
    return False


def test_health():
    """–¢–µ—Å—Ç 1: Health check"""
    print("\nüîç –¢–µ—Å—Ç 1: Health check")
    try:
        response = requests.get(f"{BASE_URL}/health")
        data = response.json()
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")
        assert response.status_code == 200
        assert data["status"] == "healthy"
        print("‚úÖ Health check —É—Å–ø—ñ—à–Ω–∏–π")
        return True
    except Exception as e:
        print(f"‚ùå Health check –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        return False


def test_database_connection():
    """–¢–µ—Å—Ç 2: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("\nüîç –¢–µ—Å—Ç 2: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î")
    try:
        response = requests.get(f"{BASE_URL}/test-connection")
        data = response.json()
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")
        assert response.status_code == 200
        assert data["status"] == "success"
        assert data["user"] == "marynalytvynenko"
        assert data["database"] == "mydatabase"
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        return False


def test_create_user():
    """–¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (INSERT)"""
    print("\nüîç –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    try:
        user_data = {
            "name": "–ú–∞—Ä–∏–Ω–∞ –õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ",
            "email": "marina.test@example.com"
        }

        response = requests.post(f"{BASE_URL}/users", json=user_data)
        data = response.json()
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")

        assert response.status_code == 201
        assert data["status"] == "success"
        assert "user_id" in data

        print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ ID: {data['user_id']}")
        return data["user_id"]
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        return None


def test_get_users():
    """–¢–µ—Å—Ç 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (SELECT)"""
    print("\nüîç –¢–µ—Å—Ç 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    try:
        response = requests.get(f"{BASE_URL}/users")
        data = response.json()
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")

        assert response.status_code == 200
        assert data["status"] == "success"
        assert "users" in data
        assert "count" in data

        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {data['count']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return data["users"]
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        return None


def test_delete_user(user_id):
    """–¢–µ—Å—Ç 5: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (DELETE)"""
    print(f"\nüîç –¢–µ—Å—Ç 5: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    try:
        response = requests.delete(f"{BASE_URL}/users/{user_id}")
        data = response.json()
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")

        assert response.status_code == 200
        assert data["status"] == "success"

        print("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: {e}")
        return False


def test_crud_operations():
    """–ü–æ–≤–Ω–∏–π CRUD —Ç–µ—Å—Ç"""
    print("\nüß™ –ü–æ–≤–Ω–∏–π CRUD —Ç–µ—Å—Ç:")

    # CREATE - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_created = []
    test_users = [
        {"name": "–¢–µ—Å—Ç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 1", "email": "test1@example.com"},
        {"name": "–¢–µ—Å—Ç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 2", "email": "test2@example.com"}
    ]

    for user_data in test_users:
        response = requests.post(f"{BASE_URL}/users", json=user_data)
        if response.status_code == 201:
            user_id = response.json()["user_id"]
            users_created.append(user_id)
            print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_data['name']} (ID: {user_id})")

    # READ - –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ—Ö
    response = requests.get(f"{BASE_URL}/users")
    if response.status_code == 200:
        count = response.json()["count"]
        print(f"‚úì –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}")

    # DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö
    for user_id in users_created:
        response = requests.delete(f"{BASE_URL}/users/{user_id}")
        if response.status_code == 200:
            print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: {user_id}")

    print("üéâ CRUD —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –î–ó 29.1")
    print("=" * 50)

    if not wait_for_app():
        print("‚ùå –î–æ–¥–∞—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è")
        return False

    tests_passed = 0
    total_tests = 5

    # –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏
    if test_health():
        tests_passed += 1

    if test_database_connection():
        tests_passed += 1

    user_id = test_create_user()
    if user_id:
        tests_passed += 1

    if test_get_users():
        tests_passed += 1

    if user_id and test_delete_user(user_id):
        tests_passed += 1

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π CRUD —Ç–µ—Å—Ç
    test_crud_operations()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - tests_passed}/{total_tests}")

    if tests_passed == total_tests:
        print("üéâ –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ –î–ó 29.1 –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)